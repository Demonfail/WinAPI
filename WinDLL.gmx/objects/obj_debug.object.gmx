<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>WinAPI_Init();

/**
#* Load Resources
**/
gmIcon = WinAPI_ResourceIconLoad("ProgIcon.ico");

/**
#* Hook the Game Maker Window.
**/
gmWin = WinAPI_WindowAdd(); {
    WinAPI_WindowSet(gmWin, window_handle());
}
WinAPI_WindowSetFlag(gmWin, WF_DRAGFILES, true);

/**
#* Create Task Bar.
**/
gmTB = WinAPI_TaskbarAdd(); {
    WinAPI_TaskbarSetWindow(gmTB, gmWin);
    WinAPI_TaskbarSetID(gmTB, game_id+gmTB);
    WinAPI_TaskbarSetFlags(gmTB, NIF_ICON | NIF_TIP | NIF_GUID | NIF_INFO);
    WinAPI_TaskbarSetInfoFlags(gmTB, NIIF_LARGE_ICON | NIIF_RESPECT_QUIET_TIME);
    WinAPI_TaskbarSetTimeout(gmTB, 2000);
    WinAPI_TaskbarSetIcon(gmTB, gmIcon);
    WinAPI_TaskbarSetName(gmTB, "WinAPI Test Bench - Taskbar");
} WinAPI_TaskbarCreate(gmTB);

WinAPI_TaskbarUpdate(gmTB, "WinAPI", "A simple notification is good for your health.");

/**
#* Ceate Console.
**/
gmCn = WinAPI_ConsoleAdd(); {

} WinAPI_ConsoleCreate();
WinAPI_ConsoleOutput("I see you've compiled the example! Here's a console for your efforts.");

/**
#* Create a second Window.
**/
chWin = WinAPI_WindowAdd(); {
    WinAPI_WindowSetSize(chWin, 640, 480);
    WinAPI_WindowSetPosition(chWin, 64, 64);
    WinAPI_WindowSetClassStyle(chWin, CS_HREDRAW | CS_VREDRAW);
    WinAPI_WindowSetIcon(chWin, gmIcon);
    WinAPI_WindowSetCursor(chWin, 0);
    WinAPI_WindowSetBackground(chWin, WB_WHITE);
    WinAPI_WindowSetTitle(chWin, "WinAPI Test Bench - Window");
    WinAPI_WindowSetStyle(chWin, WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_MINIMIZEBOX | WS_MAXIMIZEBOX | WS_MAXIMIZE); //You can use WS_OVERLAPPEDWINDOW, but thick frames are disgusting.
      
} WinAPI_WindowCreate(chWin); {
    chWinPB1 = WinAPI_ProgressBarAdd(); {
        WinAPI_ProgressBarSetWindow(chWinPB1, chWin);
        WinAPI_ProgressBarSetRange(chWinPB1, 0, 100);
        WinAPI_ProgressBarSetPosition(chWinPB1, 2, 2);
        WinAPI_ProgressBarSetSize(chWinPB1, 256, 32);
        WinAPI_ProgressBarSetStyle(chWinPB1, WS_CHILD | WS_VISIBLE | PBS_MARQUEE);
        WinAPI_ProgressBarSetStep(chWinPB1, 1);
    } WinAPI_ProgressBarCreate(chWinPB1);
    WinAPI_ProgressBarEnableMarquee(chWinPB1, true, 30);
}
WinAPI_WindowSetFlag(chWin, WF_SHOW, 0);
WinAPI_WindowSetFlag(chWin, WF_DRAGFILES, true);

WinAPI_WindowUpdate(chWin);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>WinAPI_ProgressBarUpdate(chWinPB1);

if(WinAPI_WindowGetDragFileCount(gmWin) &gt; 0) {
    for(var i = 0; i&lt;WinAPI_WindowGetDragFileCount(gmWin); ++i) {
        WinAPI_ConsoleOutput(WinAPI_WindowGetDragFile(gmWin, i));
    }
    WinAPI_WindowClearDragFiles(gmWin);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var res = WinAPI_MessageShow("Hey!", "Did you just click on the default Game Maker Window?", MB_ICONQUESTION | MB_YESNO);
switch(res) {
    case IDYES:
        show_message("Good job for telling the truth!");
    break
    
    case IDNO:
        show_message("Lying is bad.");
    break;
    
    default:
        show_message("How have you done this?");
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>WinAPI_ConsoleDestroy();
WinAPI_TaskbarDestroy(gmTB);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(0, 0,  "This won't display if the window is broken by the DLL. If you're reading this, it's working fine.");
draw_text(0, 12,  "UPS: "+string(fps));
draw_text(0, 24, "FPS: "+string(fps_real));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
